<?php
namespace Jan\Component\Routing;


use Closure;
use Exception;
use Jan\Component\Routing\Contract\RouteDispatcherInterface;
use Jan\Component\Routing\Contract\RouterInterface;
use Jan\Component\Routing\Exception\NotFoundRouteException;
use Jan\Component\Routing\Exception\RouteException;
use Jan\Component\Routing\Resource\ApiResource;
use Jan\Component\Routing\Resource\WebResource;


/**
 * Class Router
 * @package Jan\Component\Routing
*/
class Router extends RouteCollection implements RouterInterface, RouteDispatcherInterface
{

    /**
     * @var string
    */
    protected $baseURL;




    /**
     * @var mixed
    */
    protected $callback;




    /**
     * @var string
    */
    protected $action;




    /**
     * @var array
    */
    protected $params = [];




    /**
     * Get global namespace
     *
     * @var string
    */
    protected $namespace;




    /**
     * @var mixed
    */
    protected $defaultCallback;



    /**
     * @var string
    */
    protected $defaultAction;




    /**
     * Router constructor.
     *
     * @param string|null $baseURL
    */
    public function __construct(string $baseURL = null)
    {
         if ($baseURL) {
             $this->setURL($baseURL);
         }
    }



    /**
     * @param string $baseURL
     * @return Router
    */
    public function setURL(string $baseURL): Router
    {
        $this->baseURL = rtrim($baseURL, '/');

        return $this;
    }




    /**
     * @param string $path
     * @param $callback
     * @param string|null $name
     * @return Route
     * @throws RouteException
    */
    public function get(string $path, $callback, string $name = null): Route
    {
        return $this->map('GET', $path, $callback, $name);
    }




    /**
     * @param string $path
     * @param $callback
     * @param string|null $name
     * @return Route
     * @throws RouteException
    */
    public function post(string $path, $callback, string $name = null): Route
    {
        return $this->map('POST', $path, $callback, $name);
    }





    /**
     * @param string $path
     * @param $callback
     * @param string|null $name
     * @return Route
     * @throws RouteException
    */
    public function put(string $path, $callback, string $name = null): Route
    {
        return $this->map('PUT', $path, $callback, $name);
    }




    /**
     * @param string $path
     * @param $callback
     * @param string|null $name
     * @return Route
     * @throws RouteException
    */
    public function delete(string $path, $callback, string $name = null): Route
    {
        return $this->map('DELETE', $path, $callback, $name);
    }




    /**
     * @param string $path
     * @param $callback
     * @param string|null $name
     * @return Route
     * @throws RouteException
    */
    public function any(string $path, $callback, string $name = null): Route
    {
        return $this->map('GET|POST|PUT|DELETE|PATCH', $path, $callback, $name);
    }




    /**
     * Determine if the current method and path URL match route
     *
     * @param string|null $requestMethod
     * @param string|null $requestUri
     * @return false|Route
    */
    public function match(?string $requestMethod, ?string $requestUri)
    {
        /** @var Route $route */
        foreach ($this->getRoutes() as $route) {
             if ($route->match($requestMethod, $requestUri)) {
                 return $route;
             }
         }

         return false;
    }


    /**
     * Dispatch route
     *
     * @param string $requestMethod
     * @param string $requestUri
     * @return false|Route
     * @throws NotFoundRouteException
    */
    public function dispatch(string $requestMethod, string $requestUri)
    {
        $route = $this->match($requestMethod, $requestUri);

        if($route instanceof Route) {
            throw new NotFoundRouteException(sprintf('Route %s not found.', $requestUri));
        }

        $callback = $route->getCallback();

        if ($callback instanceof \Closure) {
            $this->callback = $callback;
        }else {
            if (is_string($callback) && stripos($callback, '@') !== false) {
                list($controller, $action) = explode('@', $callback, 2);
                $this->callback = rtrim($this->getNamespace(), '\\'). '\\'. $controller;
                $this->action   = $action;
            }
        }

        $this->params = $route->getMatches();

        return $route;
    }



    /**
     * Add route group
     *
     * @param Closure $routeCallback
     * @param array $prefixes
     * @return RouteCollection
    */
    public function group(Closure $routeCallback, array $prefixes = []): RouteCollection
    {
        return $this->addGroup($routeCallback, $prefixes);
    }




    /**
     * Api resource
     *
     * @param string $path
     * @param string $controller
     * @return $this
     * @throws RouteException
    */
    public function resourceWeb(string $path, string $controller): Router
    {
        return $this->addResource(new WebResource($path, $controller));
    }




    /**
     * route resource
     *
     * @param string $path
     * @param string $controller
     * @return $this
     * @throws RouteException
    */
    public function resourceAPI(string $path, string $controller): Router
    {
        return $this->addResource(new ApiResource($path, $controller));
    }


    
    
    /**
     * @param Closure|null $closure
     * @param array $options
     * @return RouteCollection
    */
    public function api(Closure $closure = null, array $options = []): RouteCollection
    {
          if (! $options) {
              $options = $this->getDefaultOptionsApi();
          }

          if (! $closure) {
              $this->addPrefixes($options);
              return $this;
          }
          
          return $this->group($closure, $options);
    }



    /**
     * Generate route URL
     *
     * @param string $name
     * @param array $parameters
     * @return string
     * @throws Exception
    */
    public function generate(string $name, array $parameters= []): ?string
    {
         if (! $this->hasRoute($name)) {
             return null;
         }

         return $this->getRoute($name)->generatePath($parameters);
    }



    /**
     * @param string $name
     * @param array $params
     * @return string
     * @throws Exception
    */
    public function url(string $name, array $params = []): string
    {
        return $this->baseURL . $this->generate($name, $params);
    }



    /**
     * namespace used for controller
     *
     * @param string $module
     * @return $this
    */
    public function namespace(string $module): Router
    {
        $this->namespace = $module;

        return $this;
    }




    /**
     * @param string $defaultCallback
     * @return $this
    */
    public function setDefaultCallback(string $defaultCallback): Router
    {
        $this->defaultCallback = $defaultCallback;

        return $this;
    }




    /**
     * @return mixed
    */
    public function getDefaultCallback()
    {
        return $this->defaultCallback;
    }




    /**
     * @param string $defaultAction
     * @return $this
    */
    public function setDefaultAction(string $defaultAction): Router
    {
        $this->defaultAction = $defaultAction;

        return $this;
    }




    /**
     * @return string
    */
    public function getDefaultAction(): string
    {
        return $this->defaultAction;
    }




    /**
     * @return mixed
    */
    public function getCallback()
    {
        return $this->callback;
    }




    /**
     * @return string|null
    */
    public function getAction(): ?string
    {
        return $this->action;
    }


    /**
     * @return string
    */
    public function getNamespace(): string
    {
        return $this->namespace;
    }


    /**
     * @return array
    */
    public function getParams(): array
    {
        return $this->params;
    }



    /**
     * @return array
    */
    protected function getDefaultOptionsApi(): array
    {
        return [self::PX_PATH => 'api', self::PX_MODULE => 'Api\\'];
    }

}