<?php
namespace Jan\Component\Database\Migration;


use Exception;
use Jan\Component\Database\DatabaseManager;
use Jan\Component\Database\Migration\Contract\MigrationInterface;
use Jan\Component\Database\Schema\Schema;


/**
 * Class Migrator
 *
 * @package Jan\Component\Database\Migration
*/
class Migrator
{

    /**
     * @var string
    */
    protected $migrationTable = 'migrations';




    /**
     * @var DatabaseManager
    */
    protected $db;




    /**
     * @var Schema
    */
    protected $schema;




    /**
     * @var array
    */
    protected $migrations = [];



    /**
     * @var array
    */
    protected $migrationFiles = [];




    /**
     * @var array
    */
    protected $migrationLog = [];




    /**
     * @param DatabaseManager $db
     * @param Schema|null $schema
    */
    public function __construct(DatabaseManager $db, Schema $schema = null)
    {
        $this->db     = $db;

        if (! $schema) {
            $this->schema = new Schema($db);
        }
    }



    /**
     * Set table name for versions migrations
     *
     * @param string $migrationTable
     * @return $this
    */
    public function migrationTable(string $migrationTable): Migrator
    {
        $this->migrationTable = $migrationTable;

        return $this;
    }



    /**
     * Add migration
     *
     * @param Migration $migration
     * @return $this
    */
    public function addMigration(Migration $migration): Migrator
    {
        $migrationName = $migration->getName();

        $this->migrations[$migrationName] = $migration;

        $this->migrationFiles[$migrationName] = $migration->getFileName();

        return $this;
    }



    /**
     * @param array $migrations
     * @return $this
    */
    public function addMigrations(array $migrations): Migrator
    {
         foreach ($migrations as $migration) {
             $this->addMigration($migration);
         }

         return $this;
    }


    /**
     * @return array
    */
    public function getMigrations(): array
    {
        return $this->migrations;
    }



    /**
     * @return array
     * @throws Exception
    */
    public function getAppliedMigrations(): array
    {
        $sql = sprintf('SELECT `version` FROM %s', $this->migrationTable);

        return $this->db->query($sql)->getResult();
    }



    /**
     * @return array
     * @throws Exception
    */
    protected function getToApplyMigrations(): array
    {
        /* array_diff($this->migrations, $this->getOldMigrations()); */

        /*
        $newMigrations = [];

        foreach ($this->migrations as $migration) {
            if (! \in_array($migration, $this->getAppliedMigrations())) {
                $newMigrations[] = $migration;
            }
        }

        return $newMigrations;
        */

        return array_diff($this->migrations, $this->getAppliedMigrations());
    }




    /**
     * Create a migration table
     *
     * @throws Exception
    */
    public function install()
    {
        $this->schema->create($this->migrationTable, function (BluePrint $table) {
            $table->increments('id');
            $table->string('version');
            $table->datetime('executed_at');
        });
    }




    /**
     * @throws Exception
    */
    public function migrate()
    {
        $this->install();

        $migrations = $this->getToApplyMigrations();

        $newMigrations = [];

        /** @var Migration $migration */
        foreach ($migrations as $name => $migration) {

            if (method_exists($migration, 'up')) {

                $this->log("Applying migration $name");
                $migration->up();
                $this->log("Applied migration $name");

                $newMigrations[] = $migration;
            }
        }

        if (! empty($newMigrations)) {
            $this->saveMigrations($newMigrations);
        }else{
            $this->log("All migrations are applied");
        }
    }



    /**
     * @param array $migrations
     * @throws Exception
    */
    public function saveMigrations(array $migrations)
    {

        $sql = sprintf(
     "INSERT INTO `%s` (version, executed_at) VALUES (:version, :executedAt)",
            $this->migrationTable
        );


        /** @var Migration $migration */
        foreach ($migrations as $migration) {

           $this->db->query($sql, [
               'version' => $migration->getName(),
               'executedAt' => $migration->getExecutedAt()
           ])->execute();
       }
    }



    /**
     * @param array $migrations
    */
    protected function downMigrations(array $migrations)
    {
         foreach ($migrations as $migration) {
             if (method_exists($migration, 'down')) {
                 $migration->down();
             }
         }
    }




    /**
     * @throws Exception
    */
    public function rollback()
    {
        $this->downMigrations($this->migrations);

        $this->schema->truncateTable($this->migrationTable);
    }




    /**
     * Reset migrations
     *
     * @throws Exception
    */
    public function reset()
    {
        $this->rollback();
        $this->schema->dropIfExists($this->migrationTable);
        $this->removeMigrationFiles();
    }



    /**
     * @param string $migrationName
     * @throws Exception
    */
    public function removeMigration(string $migrationName)
    {
         if (! $this->hasMigration($migrationName)) {
              throw new \RuntimeException('Cannot remove migration : '. $migrationName);
         }

         /** @var Migration $migration */
         $migration = $this->migrations[$migrationName];

         // remove migration from database
         $this->db->query("DELETE FROM {$this->migrationTable} WHERE `version` = :version", [
                      'version' => $migration->getName()
                  ])
                  ->execute();

         // remove migration from the list
         unset($this->migrations[$migrationName]);

         // remove migration file
         $this->removeMigrationFile($migration);
    }



    /**
     * @param string $migrationName
     * @return bool
    */
    public function hasMigration(string $migrationName): bool
    {
         return \array_key_exists($migrationName, $this->migrations);
    }




    /**
     * Remove migration files
    */
    public function removeMigrationFiles()
    {
        array_map('unlink', $this->getMigrationFiles());
    }



    /**
     * @param Migration $migration
    */
    public function removeMigrationFile(Migration $migration)
    {
          @unlink($migration->getFileName());
    }



    /**
     * @return array
    */
    public function getMigrationFiles(): array
    {
        return array_values($this->migrationFiles);
    }



    /**
     * @param $migration
     * @return bool
    */
    public function exists($migration): bool
    {
        return $migration instanceof Migration;
    }


    /**
     * @param string $message
    */
    public function log(string $message)
    {
        $message = '['. date('Y-m-d H:i:s') .'] - '. $message .PHP_EOL;

        $this->migrationLog[] = $message;
    }



    /**
     * @return void
    */
    public function displayLog()
    {
        echo join("\n", $this->migrationLog);
    }
}